import 'dart:convert';
import 'package:http/http.dart' as http;

class ApiService {
  static const String baseUrl = "http://localhost:3002/api"; // Ajuste para o IP correto

  // üîπ Login do Usu√°rio
  Future<Map<String, dynamic>> login(String email, String senha) async {
    try {
      final response = await http.post(
        Uri.parse("$baseUrl/auth/login"),
        body: jsonEncode({"email": email, "senha": senha}),
        headers: {"Content-Type": "application/json"},
      );

      print("üì¢ Resposta da API Login: ${response.body}");

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        print("‚ùå Erro ao fazer login: ${response.statusCode} - ${response.body}");
        throw Exception("Erro ao fazer login");
      }
    } catch (error) {
      print("‚ùå Erro na requisi√ß√£o: $error");
      throw Exception("Erro de conex√£o com o servidor");
    }
  }

  // üîπ Buscar Estoque (com produtos associados)
  Future<List<dynamic>> getEstoque() async {
    final response = await http.get(Uri.parse("$baseUrl/estoque"));

    if (response.statusCode == 200) {
      return json.decode(response.body);
    } else {
      throw Exception("Erro ao buscar estoque");
    }
  }

  // üîπ Buscar Produtos
  Future<List<dynamic>> getProdutos() async {
    final response = await http.get(Uri.parse("$baseUrl/produtos"));

    if (response.statusCode == 200) {
      return json.decode(response.body);
    } else {
      throw Exception("Erro ao buscar produtos");
    }
  }

  // üîπ Buscar Cortes de uma Parte
  Future<List<dynamic>> getCortes(int produtoId) async {
    final response = await http.get(Uri.parse("$baseUrl/cortes/parte/$produtoId")); // ‚úÖ Corrigido

    if (response.statusCode == 200) {
      return json.decode(response.body);
    } else {
      throw Exception("Erro ao buscar cortes");
    }
  }

  // üîπ Buscar o peso total dispon√≠vel de uma parte no estoque
  Future<double> getPesoParte(int produtoId) async {
    final response = await http.get(Uri.parse("$baseUrl/estoque/peso/$produtoId"));

    if (response.statusCode == 200) {
      final data = json.decode(response.body);
      return double.parse(data["peso"].toString());
    } else {
      throw Exception("Erro ao buscar peso do produto");
    }
  }

Future<bool> iniciarProducao(int produtoId, int usuarioId) async {
  final response = await http.post(
    Uri.parse("$baseUrl/producao/iniciar"),
    headers: {"Content-Type": "application/json"},
    body: json.encode({
      "produto_id": produtoId,
      "kg_recebido": 100,  // ‚ö†Ô∏è Adjust this based on your requirements
      "usuario_id": usuarioId,
    }),
  );

  print("üì¢ Resposta da API Iniciar Produ√ß√£o: ${response.body}");

  if (response.statusCode == 200) {
    return true; // ‚úÖ Success
  } else {
    print("‚ùå Erro ao iniciar produ√ß√£o: ${response.statusCode} - ${response.body}");
    return false; // ‚ùå Failed
  }
}

  // üîπ Finalizar Produ√ß√£o (Corrigido)
Future<bool> finalizarProducao(Map<String, dynamic> requestBody) async {
  final response = await http.post(
    Uri.parse("$baseUrl/producao/finalizar"),
    headers: {"Content-Type": "application/json"},
    body: json.encode(requestBody),
  );

  if (response.statusCode == 200) {
    return true; // ‚úÖ Success
  } else {
    print("‚ùå Erro ao finalizar produ√ß√£o: ${response.statusCode} - ${response.body}");
    return false; // ‚ùå Failed
  }
}

// üîπ Buscar cortes dispon√≠veis para venda
Future<List<dynamic>> getCortesDisponiveis() async {
  final response = await http.get(Uri.parse("$baseUrl/estoque/cortes_disponiveis"));

  if (response.statusCode == 200) {
    return json.decode(response.body);
  } else {
    throw Exception("Erro ao buscar cortes dispon√≠veis.");
  }
}

// üîπ Registrar venda
Future<void> registrarVenda(String produtoId, double quantidade, int usuarioId) async {
  final response = await http.post(
    Uri.parse("$baseUrl/vendas"),
    headers: {"Content-Type": "application/json"},
    body: json.encode({
      "produto_id": produtoId,
      "quantidade_vendida": quantidade,
      "usuario_id": usuarioId,
    }),
  );

  if (response.statusCode != 200) {
    throw Exception("Erro ao registrar venda.");
  }
}
// üîπ Buscar Cortes com mais estoque para o gr√°fico da dashboard
  Future<List<dynamic>> getCortesMaisEstoque() async {
    try {
      final response = await http.get(Uri.parse("$baseUrl/estoque/cortes_disponiveis"));

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        throw Exception("Erro ao buscar cortes com mais estoque");
      }
    } catch (error) {
      print("‚ùå Erro ao buscar cortes mais estoque: $error");
      throw Exception("Erro ao buscar cortes dispon√≠veis");
    }
  }
Future<List<dynamic>> getProdutosEstoque() async {
  final response = await http.get(Uri.parse("http://localhost:3002/api/estoque/produtos"));

  if (response.statusCode == 200) {
    return json.decode(response.body);
  } else {
    throw Exception("Erro ao buscar produtos em estoque");
  }
}

}
